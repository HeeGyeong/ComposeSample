package com.example.composesample.presentation.example.component.system.ui.widget

import android.annotation.SuppressLint
import android.content.Context
import androidx.compose.animation.ExperimentalAnimationApi
import androidx.compose.runtime.Composable
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.glance.Button
import androidx.glance.ButtonDefaults
import androidx.glance.GlanceId
import androidx.glance.GlanceModifier
import androidx.glance.GlanceTheme
import androidx.glance.action.actionStartActivity
import androidx.glance.action.clickable
import androidx.glance.appwidget.GlanceAppWidget
import androidx.glance.appwidget.action.actionRunCallback
import androidx.glance.appwidget.provideContent
import androidx.glance.background
import androidx.glance.layout.Alignment
import androidx.glance.layout.Box
import androidx.glance.layout.Column
import androidx.glance.layout.Spacer
import androidx.glance.layout.fillMaxSize
import androidx.glance.layout.height
import androidx.glance.layout.padding
import androidx.glance.layout.wrapContentSize
import androidx.glance.text.FontWeight
import androidx.glance.text.Text
import androidx.glance.text.TextAlign
import androidx.glance.text.TextStyle
import androidx.glance.unit.ColorProvider
import androidx.glance.LocalSize
import androidx.glance.layout.Row
import androidx.compose.ui.unit.DpSize
import androidx.glance.layout.fillMaxWidth
import androidx.glance.layout.width
import com.example.composesample.presentation.MainActivity
import com.example.composesample.presentation.example.exampleObjectList
import java.text.SimpleDateFormat
import java.util.Date
import java.util.Locale

/**
 * Streaks Widget Implementation
 */
class StreaksWidget : GlanceAppWidget() {

    @SuppressLint("RestrictedApi")
    @OptIn(ExperimentalAnimationApi::class)
    override suspend fun provideGlance(context: Context, id: GlanceId) {
        var streakData: WeeklyPostingStreak? = null

        val exampleList = exampleObjectList()
        val lastUpdateTitle = exampleList.lastOrNull()?.title ?: "ÌÉÄÏù¥ÌãÄ Ï†ïÎ≥¥ ÏóÜÏùå"
        val lastUpdateDate = exampleList.lastOrNull()?.lastUpdate ?: "ÏóÖÎç∞Ïù¥Ìä∏ Ï†ïÎ≥¥ ÏóÜÏùå"
        val currentTime = SimpleDateFormat("HH:mm:ss", Locale.getDefault()).format(Date())

        streakData = WeeklyPostingStreak(
            message = lastUpdateTitle,
            lastUpdate = lastUpdateDate,
            refreshedAt = currentTime
        )

        provideContent {
            GlanceTheme {
                streakData.let { data ->
                    val streakModifier = GlanceModifier.clickable(
                        actionStartActivity<MainActivity>()
                    )
                    StreakContent(modifier = streakModifier, content = data)
                }
            }
        }
    }
}

@SuppressLint("RestrictedApi")
@Composable
private fun StreakContent(
    modifier: GlanceModifier = GlanceModifier,
    content: WeeklyPostingStreak
) {
    val size = LocalSize.current
    
    Box(
        modifier = modifier
            .background(ColorProvider(Color(0xFF6200EE)))
            .padding(16.dp)
            .fillMaxSize(),
        contentAlignment = Alignment.Center
    ) {
        when {
            // ÌÅ∞ ÏúÑÏ†Ø (3x2 Ïù¥ÏÉÅ) - Í∞ÄÎ°úÍ∞Ä ÎÑìÍ≥† ÏÑ∏Î°úÎèÑ Ï∂©Î∂ÑÌï† Îïå
            size.width >= 320.dp && size.height >= 120.dp -> {
                LargeWidgetLayout(content = content)
            }
            // Ï§ëÍ∞Ñ ÏúÑÏ†Ø (2x2) - Ï†ïÏÇ¨Í∞ÅÌòïÏóê Í∞ÄÍπåÏö¥ ÌòïÌÉú
            size.width >= 180.dp && size.height >= 120.dp -> {
                MediumWidgetLayout(content = content)
            }
            // ÏûëÏùÄ ÏúÑÏ†Ø (2x1) - Í∞ÄÎ°úÎ°ú Í∏¥ ÌòïÌÉú
            else -> {
                SmallWidgetLayout(content = content)
            }
        }
    }
}

// ÌÅ∞ ÏúÑÏ†ØÏö© Î†àÏù¥ÏïÑÏõÉ (3x2 Ïù¥ÏÉÅ)
@SuppressLint("RestrictedApi")
@Composable
private fun LargeWidgetLayout(
    content: WeeklyPostingStreak
) {
    Row(
        modifier = GlanceModifier.fillMaxWidth(),
        verticalAlignment = Alignment.CenterVertically
    ) {
        // ÏôºÏ™Ω: ÏïÑÏù¥ÏΩòÍ≥º Ï†úÎ™©
        Column(
            modifier = GlanceModifier.defaultWeight(),
            horizontalAlignment = Alignment.Start
        ) {
            Text(
                text = "‚≠ê Glance Widget",
                style = TextStyle(
                    color = ColorProvider(Color.White),
                    fontSize = 18.sp,
                    fontWeight = FontWeight.Bold
                )
            )
            
            Spacer(modifier = GlanceModifier.height(8.dp))
            
            Text(
                text = content.message,
                style = TextStyle(
                    color = ColorProvider(Color.White),
                    fontSize = 14.sp,
                    textAlign = TextAlign.Start
                )
            )
            
            Spacer(modifier = GlanceModifier.height(4.dp))
            
            Text(
                text = "ÏóÖÎç∞Ïù¥Ìä∏: ${content.lastUpdate}",
                style = TextStyle(
                    color = ColorProvider(Color.White.copy(alpha = 0.8f)),
                    fontSize = 10.sp
                )
            )
            
            Text(
                text = "ÏÉàÎ°úÍ≥†Ïπ®: ${content.refreshedAt}",
                style = TextStyle(
                    color = ColorProvider(Color.White.copy(alpha = 0.6f)),
                    fontSize = 8.sp
                )
            )
        }
        
        // Ïò§Î•∏Ï™Ω: ÏÉàÎ°úÍ≥†Ïπ® Î≤ÑÌäº
        Column(
            horizontalAlignment = Alignment.CenterHorizontally
        ) {
            Button(
                text = "üîÑ",
                onClick = actionRunCallback<RefreshWidgetAction>(),
                colors = ButtonDefaults.buttonColors(
                    backgroundColor = ColorProvider(Color.White.copy(alpha = 0.2f)),
                    contentColor = ColorProvider(Color.White)
                )
            )
        }
    }
}

// Ï§ëÍ∞Ñ ÏúÑÏ†ØÏö© Î†àÏù¥ÏïÑÏõÉ (2x2)
@SuppressLint("RestrictedApi")
@Composable
private fun MediumWidgetLayout(
    content: WeeklyPostingStreak
) {
    Column(
        horizontalAlignment = Alignment.CenterHorizontally
    ) {
        Text(
            text = "‚≠ê",
            style = TextStyle(
                color = ColorProvider(Color.White),
                fontSize = 20.sp
            )
        )
        
        Spacer(modifier = GlanceModifier.height(6.dp))
        
        Text(
            text = "Glance Widget",
            style = TextStyle(
                color = ColorProvider(Color.White),
                fontSize = 13.sp,
                fontWeight = FontWeight.Bold,
                textAlign = TextAlign.Center
            )
        )

        Spacer(modifier = GlanceModifier.height(4.dp))

        Text(
            text = "ÏóÖÎç∞Ïù¥Ìä∏: ${content.lastUpdate}",
            style = TextStyle(
                color = ColorProvider(Color.White.copy(alpha = 0.8f)),
                fontSize = 9.sp,
                textAlign = TextAlign.Center
            )
        )
        
        Text(
            text = "ÏÉàÎ°úÍ≥†Ïπ®: ${content.refreshedAt}",
            style = TextStyle(
                color = ColorProvider(Color.White.copy(alpha = 0.6f)),
                fontSize = 8.sp,
                textAlign = TextAlign.Center
            )
        )

        Spacer(modifier = GlanceModifier.height(6.dp))

        Button(
            text = "üîÑ ÏÉàÎ°úÍ≥†Ïπ®",
            onClick = actionRunCallback<RefreshWidgetAction>(),
            colors = ButtonDefaults.buttonColors(
                backgroundColor = ColorProvider(Color.White.copy(alpha = 0.2f)),
                contentColor = ColorProvider(Color.White)
            )
        )
    }
}

// ÏûëÏùÄ ÏúÑÏ†ØÏö© Î†àÏù¥ÏïÑÏõÉ (2x1)
@SuppressLint("RestrictedApi")
@Composable
private fun SmallWidgetLayout(
    content: WeeklyPostingStreak
) {
    Row(
        modifier = GlanceModifier.fillMaxWidth(),
        verticalAlignment = Alignment.CenterVertically
    ) {
        // ÏïÑÏù¥ÏΩò
        Text(
            text = "‚≠ê",
            style = TextStyle(
                color = ColorProvider(Color.White),
                fontSize = 16.sp
            )
        )
        
        Spacer(modifier = GlanceModifier.width(8.dp))
        
        // ÌÖçÏä§Ìä∏ Ï†ïÎ≥¥
        Column(
            modifier = GlanceModifier.defaultWeight(),
            horizontalAlignment = Alignment.Start
        ) {
            Text(
                text = "Glance Widget",
                style = TextStyle(
                    color = ColorProvider(Color.White),
                    fontSize = 11.sp,
                    fontWeight = FontWeight.Bold
                )
            )
            
            Text(
                text = "${content.refreshedAt}",
                style = TextStyle(
                    color = ColorProvider(Color.White.copy(alpha = 0.8f)),
                    fontSize = 8.sp
                )
            )
        }
        
        // ÏÉàÎ°úÍ≥†Ïπ® Î≤ÑÌäº
        Button(
            text = "üîÑ",
            onClick = actionRunCallback<RefreshWidgetAction>(),
            colors = ButtonDefaults.buttonColors(
                backgroundColor = ColorProvider(Color.White.copy(alpha = 0.2f)),
                contentColor = ColorProvider(Color.White)
            )
        )
    }
}

data class WeeklyPostingStreak(
    val message: String,
    val lastUpdate: String,
    val refreshedAt: String
) 