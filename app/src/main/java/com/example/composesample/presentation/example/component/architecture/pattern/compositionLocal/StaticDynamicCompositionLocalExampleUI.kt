package com.example.composesample.presentation.example.component.architecture.pattern.compositionLocal

import androidx.compose.animation.core.animateFloatAsState
import androidx.compose.foundation.background
import androidx.compose.foundation.border
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.shape.CircleShape
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material.*
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.CheckCircle
import androidx.compose.material.icons.filled.Refresh
import androidx.compose.material.icons.filled.Warning
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import com.example.composesample.presentation.MainHeader
import kotlinx.coroutines.delay

// Static CompositionLocal (Ï†ÑÏ≤¥ Î¶¨Ïª¥Ìè¨ÏßÄÏÖò)
val LocalStaticCounter = staticCompositionLocalOf { 0 }

// Dynamic CompositionLocal (Î∂ÄÎ∂Ñ Î¶¨Ïª¥Ìè¨ÏßÄÏÖò)
val LocalDynamicCounter = compositionLocalOf { 0 }

@Composable
fun StaticDynamicCompositionLocalExampleUI(
    onBackEvent: () -> Unit
) {
    var staticCounter by remember { mutableStateOf(0) }
    var dynamicCounter by remember { mutableStateOf(0) }

    Column(
        modifier = Modifier
            .fillMaxSize()
            .background(Color.White)
    ) {
        MainHeader(
            title = "Static vs Dynamic CompositionLocal",
            onBackIconClicked = onBackEvent
        )

        LazyColumn(
            modifier = Modifier.fillMaxSize(),
            contentPadding = PaddingValues(16.dp),
            verticalArrangement = Arrangement.spacedBy(16.dp)
        ) {
            item { OverviewCard() }
            item { ControlPanel(staticCounter, dynamicCounter, { staticCounter = it }, { dynamicCounter = it }) }
            item {
                CompositionLocalProvider(LocalStaticCounter provides staticCounter) {
                    StaticCompositionLocalDemo()
                }
            }
            item {
                CompositionLocalProvider(LocalDynamicCounter provides dynamicCounter) {
                    DynamicCompositionLocalDemo()
                }
            }
            item { ComparisonCard() }
            item { DecisionGuideCard() }
        }
    }
}

@Composable
private fun OverviewCard() {
    Card(
        modifier = Modifier.fillMaxWidth(),
        elevation = 4.dp,
        shape = RoundedCornerShape(12.dp)
    ) {
        Column(
            modifier = Modifier.padding(16.dp)
        ) {
            Text(
                text = "üéØ Static vs Dynamic CompositionLocal",
                fontSize = 18.sp,
                fontWeight = FontWeight.Bold,
                color = Color(0xFF1976D2)
            )

            Spacer(modifier = Modifier.height(8.dp))

            Text(
                text = "CompositionLocalÏùò Îëê Í∞ÄÏßÄ ÌÉÄÏûÖÏùÄ 'Î≥ÄÍ≤Ω ÎπàÎèÑ'Í∞Ä ÏïÑÎãå 'Î¶¨Ïª¥Ìè¨ÏßÄÏÖò Ï†ÑÌåå Î∞©Ïãù'ÏóêÏÑú Ï∞®Ïù¥Í∞Ä ÏûàÏäµÎãàÎã§.",
                fontSize = 14.sp,
                color = Color.Gray
            )

            Spacer(modifier = Modifier.height(12.dp))

            Row(
                modifier = Modifier.fillMaxWidth(),
                horizontalArrangement = Arrangement.spacedBy(8.dp)
            ) {
                FeatureChip("Static: Ï†ÑÏ≤¥", Color(0xFFD32F2F))
                FeatureChip("Dynamic: Î∂ÄÎ∂Ñ", Color(0xFF4CAF50))
            }

            Spacer(modifier = Modifier.height(12.dp))

            Surface(
                modifier = Modifier.fillMaxWidth(),
                shape = RoundedCornerShape(8.dp),
                color = Color(0xFFF5F5F5)
            ) {
                Text(
                    text = "üí° ÏïÑÎûò Î≤ÑÌäºÏúºÎ°ú Í∞íÏùÑ Î≥ÄÍ≤ΩÌïòÎ©∞ Î¶¨Ïª¥Ìè¨ÏßÄÏÖò Ï∞®Ïù¥Î•º ÌôïÏù∏ÌïòÏÑ∏Ïöî",
                    modifier = Modifier.padding(12.dp),
                    fontSize = 12.sp,
                    color = Color(0xFF666666),
                    fontStyle = androidx.compose.ui.text.font.FontStyle.Italic
                )
            }
        }
    }
}

@Composable
private fun FeatureChip(text: String, color: Color) {
    Surface(
        modifier = Modifier,
        shape = RoundedCornerShape(16.dp),
        color = color.copy(alpha = 0.1f)
    ) {
        Text(
            text = text,
            modifier = Modifier.padding(horizontal = 12.dp, vertical = 6.dp),
            fontSize = 12.sp,
            color = color,
            fontWeight = FontWeight.Medium
        )
    }
}

@Composable
private fun ControlPanel(
    staticCounter: Int,
    dynamicCounter: Int,
    onStaticChange: (Int) -> Unit,
    onDynamicChange: (Int) -> Unit
) {
    Card(
        modifier = Modifier.fillMaxWidth(),
        elevation = 4.dp,
        backgroundColor = Color(0xFFFFF3E0),
        shape = RoundedCornerShape(12.dp)
    ) {
        Column(
            modifier = Modifier.padding(16.dp)
        ) {
            Text(
                text = "üéÆ Ï†úÏñ¥ Ìå®ÎÑê",
                fontSize = 16.sp,
                fontWeight = FontWeight.Bold,
                color = Color(0xFFE65100)
            )

            Spacer(modifier = Modifier.height(12.dp))

            // Static Counter Control
            Text(
                text = "Static Counter: $staticCounter",
                fontSize = 14.sp,
                fontWeight = FontWeight.Medium,
                color = Color(0xFFD32F2F)
            )

            Spacer(modifier = Modifier.height(8.dp))

            Row(
                modifier = Modifier.fillMaxWidth(),
                horizontalArrangement = Arrangement.spacedBy(8.dp)
            ) {
                Button(
                    onClick = { onStaticChange(staticCounter + 1) },
                    modifier = Modifier.weight(1f),
                    colors = ButtonDefaults.buttonColors(backgroundColor = Color(0xFFD32F2F)),
                    shape = RoundedCornerShape(8.dp)
                ) {
                    Text("Static +1", color = Color.White, fontSize = 12.sp)
                }

                Button(
                    onClick = { onStaticChange(0) },
                    modifier = Modifier.weight(1f),
                    colors = ButtonDefaults.buttonColors(backgroundColor = Color(0xFFE57373)),
                    shape = RoundedCornerShape(8.dp)
                ) {
                    Icon(
                        imageVector = Icons.Filled.Refresh,
                        contentDescription = "Reset",
                        tint = Color.White,
                        modifier = Modifier.size(16.dp)
                    )
                    Spacer(modifier = Modifier.width(4.dp))
                    Text("Reset", color = Color.White, fontSize = 12.sp)
                }
            }

            Spacer(modifier = Modifier.height(16.dp))

            // Dynamic Counter Control
            Text(
                text = "Dynamic Counter: $dynamicCounter",
                fontSize = 14.sp,
                fontWeight = FontWeight.Medium,
                color = Color(0xFF4CAF50)
            )

            Spacer(modifier = Modifier.height(8.dp))

            Row(
                modifier = Modifier.fillMaxWidth(),
                horizontalArrangement = Arrangement.spacedBy(8.dp)
            ) {
                Button(
                    onClick = { onDynamicChange(dynamicCounter + 1) },
                    modifier = Modifier.weight(1f),
                    colors = ButtonDefaults.buttonColors(backgroundColor = Color(0xFF4CAF50)),
                    shape = RoundedCornerShape(8.dp)
                ) {
                    Text("Dynamic +1", color = Color.White, fontSize = 12.sp)
                }

                Button(
                    onClick = { onDynamicChange(0) },
                    modifier = Modifier.weight(1f),
                    colors = ButtonDefaults.buttonColors(backgroundColor = Color(0xFF81C784)),
                    shape = RoundedCornerShape(8.dp)
                ) {
                    Icon(
                        imageVector = Icons.Filled.Refresh,
                        contentDescription = "Reset",
                        tint = Color.White,
                        modifier = Modifier.size(16.dp)
                    )
                    Spacer(modifier = Modifier.width(4.dp))
                    Text("Reset", color = Color.White, fontSize = 12.sp)
                }
            }

            Spacer(modifier = Modifier.height(12.dp))

            Surface(
                modifier = Modifier.fillMaxWidth(),
                shape = RoundedCornerShape(8.dp),
                color = Color(0xFFE65100).copy(alpha = 0.1f)
            ) {
                Text(
                    text = "‚ö†Ô∏è Static Ï¶ùÍ∞Ä Ïãú: ÏïÑÎûò Î™®Îì† Ïª¥Ìè¨ÎÑåÌä∏ Î¶¨Ïª¥Ìè¨ÏßÄÏÖò\n‚úÖ Dynamic Ï¶ùÍ∞Ä Ïãú: Í∞íÏùÑ ÏùΩÎäî Ïª¥Ìè¨ÎÑåÌä∏Îßå Î¶¨Ïª¥Ìè¨ÏßÄÏÖò",
                    modifier = Modifier.padding(12.dp),
                    fontSize = 11.sp,
                    color = Color(0xFFE65100),
                    lineHeight = 16.sp
                )
            }
        }
    }
}

@Composable
private fun StaticCompositionLocalDemo() {
    Card(
        modifier = Modifier.fillMaxWidth(),
        elevation = 4.dp,
        backgroundColor = Color(0xFFFFEBEE),
        shape = RoundedCornerShape(12.dp)
    ) {
        Column(
            modifier = Modifier.padding(16.dp)
        ) {
            Text(
                text = "üî¥ staticCompositionLocalOf",
                fontSize = 16.sp,
                fontWeight = FontWeight.Bold,
                color = Color(0xFFD32F2F)
            )

            Spacer(modifier = Modifier.height(8.dp))

            Text(
                text = "Í∞í Î≥ÄÍ≤Ω Ïãú Provider Ïù¥Ìïò Ï†ÑÏ≤¥ Î¶¨Ïª¥Ìè¨ÏßÄÏÖò",
                fontSize = 12.sp,
                color = Color.Gray
            )

            Spacer(modifier = Modifier.height(12.dp))

            Row(
                modifier = Modifier.fillMaxWidth(),
                horizontalArrangement = Arrangement.spacedBy(8.dp)
            ) {
                StaticReaderComponent(label = "Reader A", modifier = Modifier.weight(1f))
                StaticNonReaderComponent(label = "Non-Reader B", modifier = Modifier.weight(1f))
                StaticReaderComponent(label = "Reader C", modifier = Modifier.weight(1f))
            }

            Spacer(modifier = Modifier.height(12.dp))

            Surface(
                modifier = Modifier.fillMaxWidth(),
                shape = RoundedCornerShape(8.dp),
                color = Color(0xFFD32F2F).copy(alpha = 0.1f)
            ) {
                Column(
                    modifier = Modifier.padding(12.dp)
                ) {
                    Text(
                        text = "‚ö†Ô∏è Î¶¨Ïª¥Ìè¨ÏßÄÏÖò ÎèôÏûë:",
                        fontSize = 12.sp,
                        fontWeight = FontWeight.Bold,
                        color = Color(0xFFD32F2F)
                    )
                    Spacer(modifier = Modifier.height(4.dp))
                    Text(
                        text = "‚Ä¢ Í∞íÏùÑ ÏùΩÎäî A, CÎøêÎßå ÏïÑÎãàÎùº\n‚Ä¢ Í∞íÏùÑ ÏùΩÏßÄ ÏïäÎäî BÎèÑ Î¶¨Ïª¥Ìè¨ÏßÄÏÖò\n‚Ä¢ Ï†ÑÏ≤¥ ÌïòÏúÑ Ìä∏Î¶¨ Î¨¥Ìö®Ìôî",
                        fontSize = 11.sp,
                        color = Color(0xFFD32F2F),
                        lineHeight = 16.sp
                    )
                }
            }
        }
    }
}

@Composable
private fun StaticReaderComponent(label: String, modifier: Modifier = Modifier) {
    val counter = LocalStaticCounter.current
    var recomposeCount by remember { mutableStateOf(0) }

    LaunchedEffect(counter) {
        recomposeCount++
    }

    RecompositionIndicator(
        label = label,
        value = "üìñ $counter",
        recomposeCount = recomposeCount,
        color = Color(0xFFD32F2F),
        reads = true,
        modifier = modifier
    )
}

@Composable
private fun StaticNonReaderComponent(label: String, modifier: Modifier = Modifier) {
    var recomposeCount by remember { mutableStateOf(0) }

    // LocalStaticCounterÎ•º ÏùΩÏßÄ ÏïäÏùå
    LaunchedEffect(Unit) {
        recomposeCount++
    }

    // ÌïòÏßÄÎßå StaticÏù¥ÎØÄÎ°ú Í∞í Î≥ÄÍ≤Ω Ïãú Î¶¨Ïª¥Ìè¨ÏßÄÏÖòÎê®
    val currentComposition = currentRecomposeScope
    DisposableEffect(currentComposition) {
        recomposeCount++
        onDispose { }
    }

    RecompositionIndicator(
        label = label,
        value = "üö´ -",
        recomposeCount = recomposeCount,
        color = Color(0xFF9E9E9E),
        reads = false,
        modifier = modifier
    )
}

@Composable
private fun DynamicCompositionLocalDemo() {
    Card(
        modifier = Modifier.fillMaxWidth(),
        elevation = 4.dp,
        backgroundColor = Color(0xFFE8F5E8),
        shape = RoundedCornerShape(12.dp)
    ) {
        Column(
            modifier = Modifier.padding(16.dp)
        ) {
            Text(
                text = "üü¢ compositionLocalOf",
                fontSize = 16.sp,
                fontWeight = FontWeight.Bold,
                color = Color(0xFF4CAF50)
            )

            Spacer(modifier = Modifier.height(8.dp))

            Text(
                text = "Í∞í Î≥ÄÍ≤Ω Ïãú Ïã§Ï†úÎ°ú ÏùΩÎäî Ïª¥Ìè¨Ï†ÄÎ∏îÎßå Î¶¨Ïª¥Ìè¨ÏßÄÏÖò",
                fontSize = 12.sp,
                color = Color.Gray
            )

            Spacer(modifier = Modifier.height(12.dp))

            Row(
                modifier = Modifier.fillMaxWidth(),
                horizontalArrangement = Arrangement.spacedBy(8.dp)
            ) {
                DynamicReaderComponent(label = "Reader A", modifier = Modifier.weight(1f))
                DynamicNonReaderComponent(label = "Non-Reader B", modifier = Modifier.weight(1f))
                DynamicReaderComponent(label = "Reader C", modifier = Modifier.weight(1f))
            }

            Spacer(modifier = Modifier.height(12.dp))

            Surface(
                modifier = Modifier.fillMaxWidth(),
                shape = RoundedCornerShape(8.dp),
                color = Color(0xFF4CAF50).copy(alpha = 0.1f)
            ) {
                Column(
                    modifier = Modifier.padding(12.dp)
                ) {
                    Text(
                        text = "‚úÖ Î¶¨Ïª¥Ìè¨ÏßÄÏÖò ÎèôÏûë:",
                        fontSize = 12.sp,
                        fontWeight = FontWeight.Bold,
                        color = Color(0xFF4CAF50)
                    )
                    Spacer(modifier = Modifier.height(4.dp))
                    Text(
                        text = "‚Ä¢ Í∞íÏùÑ ÏùΩÎäî A, CÎßå Î¶¨Ïª¥Ìè¨ÏßÄÏÖò\n‚Ä¢ Í∞íÏùÑ ÏùΩÏßÄ ÏïäÎäî BÎäî Î¶¨Ïª¥Ìè¨ÏßÄÏÖò Ïïà Ìï®\n‚Ä¢ Î∂ÄÎ∂Ñ Î¨¥Ìö®ÌôîÎ°ú ÏÑ±Îä• ÏµúÏ†ÅÌôî",
                        fontSize = 11.sp,
                        color = Color(0xFF4CAF50),
                        lineHeight = 16.sp
                    )
                }
            }
        }
    }
}

@Composable
private fun DynamicReaderComponent(label: String, modifier: Modifier = Modifier) {
    val counter = LocalDynamicCounter.current
    var recomposeCount by remember { mutableStateOf(0) }

    LaunchedEffect(counter) {
        recomposeCount++
    }

    RecompositionIndicator(
        label = label,
        value = "üìñ $counter",
        recomposeCount = recomposeCount,
        color = Color(0xFF4CAF50),
        reads = true,
        modifier = modifier
    )
}

@Composable
private fun DynamicNonReaderComponent(label: String, modifier: Modifier = Modifier) {
    var recomposeCount by remember { mutableStateOf(0) }

    // LocalDynamicCounterÎ•º ÏùΩÏßÄ ÏïäÏùå
    LaunchedEffect(Unit) {
        recomposeCount++
    }

    RecompositionIndicator(
        label = label,
        value = "üö´ -",
        recomposeCount = recomposeCount,
        color = Color(0xFF9E9E9E),
        reads = false,
        modifier = modifier
    )
}

@Composable
private fun RecompositionIndicator(
    label: String,
    value: String,
    recomposeCount: Int,
    color: Color,
    reads: Boolean,
    modifier: Modifier = Modifier
) {
    val scale by animateFloatAsState(
        targetValue = if (recomposeCount > 0) 1.1f else 1f,
        animationSpec = androidx.compose.animation.core.spring(
            dampingRatio = androidx.compose.animation.core.Spring.DampingRatioMediumBouncy,
            stiffness = androidx.compose.animation.core.Spring.StiffnessLow
        )
    )

    Column(
        modifier = modifier
            .background(Color.White, RoundedCornerShape(8.dp))
            .border(2.dp, color, RoundedCornerShape(8.dp))
            .padding(12.dp),
        horizontalAlignment = Alignment.CenterHorizontally
    ) {
        Text(
            text = label,
            fontSize = 11.sp,
            fontWeight = FontWeight.Medium,
            color = color,
            textAlign = TextAlign.Center
        )

        Spacer(modifier = Modifier.height(8.dp))

        Text(
            text = value,
            fontSize = 16.sp,
            fontWeight = FontWeight.Bold,
            color = if (reads) color else Color(0xFF9E9E9E),
            textAlign = TextAlign.Center
        )

        Spacer(modifier = Modifier.height(8.dp))

        Surface(
            modifier = Modifier.fillMaxWidth(),
            shape = RoundedCornerShape(4.dp),
            color = color.copy(alpha = 0.1f)
        ) {
            Column(
                modifier = Modifier.padding(6.dp),
                horizontalAlignment = Alignment.CenterHorizontally
            ) {
                Text(
                    text = "Î¶¨Ïª¥Ìè¨ÏßÄÏÖò",
                    fontSize = 9.sp,
                    color = Color.Gray
                )
                Text(
                    text = "${recomposeCount}Ìöå",
                    fontSize = 12.sp,
                    fontWeight = FontWeight.Bold,
                    color = color
                )
            }
        }
    }
}

@Composable
private fun ComparisonCard() {
    Card(
        modifier = Modifier.fillMaxWidth(),
        elevation = 4.dp,
        backgroundColor = Color(0xFFE3F2FD),
        shape = RoundedCornerShape(12.dp)
    ) {
        Column(
            modifier = Modifier.padding(16.dp)
        ) {
            Text(
                text = "‚öñÔ∏è ÌäπÏßï ÎπÑÍµê",
                fontSize = 16.sp,
                fontWeight = FontWeight.Bold,
                color = Color(0xFF1976D2)
            )

            Spacer(modifier = Modifier.height(12.dp))

            ComparisonItem(
                title = "Î¶¨Ïª¥Ìè¨ÏßÄÏÖò Î≤îÏúÑ",
                staticText = "Ï†ÑÏ≤¥ ÌïòÏúÑ Ìä∏Î¶¨",
                dynamicText = "ÏùΩÎäî Ïª¥Ìè¨Ï†ÄÎ∏îÎßå"
            )

            Spacer(modifier = Modifier.height(8.dp))

            ComparisonItem(
                title = "Ï¥àÍ∏∞ ÏÑ±Îä•",
                staticText = "Îπ†Î¶Ñ (Ï∂îÏ†Å ÏóÜÏùå)",
                dynamicText = "ÏïΩÍ∞Ñ ÎäêÎ¶º (Ï∂îÏ†Å)"
            )

            Spacer(modifier = Modifier.height(8.dp))

            ComparisonItem(
                title = "Î≥ÄÍ≤Ω Ïãú ÏÑ±Îä•",
                staticText = "ÎäêÎ¶º (Ï†ÑÏ≤¥ Î¨¥Ìö®Ìôî)",
                dynamicText = "Îπ†Î¶Ñ (Î∂ÄÎ∂Ñ Î¨¥Ìö®Ìôî)"
            )

            Spacer(modifier = Modifier.height(8.dp))

            ComparisonItem(
                title = "Î©îÎ™®Î¶¨ ÏÇ¨Ïö©",
                staticText = "Ï†ÅÏùå",
                dynamicText = "ÏïΩÍ∞Ñ ÎßéÏùå"
            )

            Spacer(modifier = Modifier.height(12.dp))

            Surface(
                modifier = Modifier.fillMaxWidth(),
                shape = RoundedCornerShape(8.dp),
                color = Color(0xFF1976D2).copy(alpha = 0.1f)
            ) {
                Text(
                    text = "üí° ÌïµÏã¨: 'Î≥ÄÍ≤Ω ÎπàÎèÑ'Í∞Ä ÏïÑÎãå 'Î¶¨Ïª¥Ìè¨ÏßÄÏÖò Ìå®ÌÑ¥'Ïù¥ ÏÑ†ÌÉù Í∏∞Ï§ÄÏûÖÎãàÎã§",
                    modifier = Modifier.padding(12.dp),
                    fontSize = 12.sp,
                    color = Color(0xFF1976D2),
                    fontWeight = FontWeight.Medium,
                    lineHeight = 16.sp
                )
            }
        }
    }
}

@Composable
private fun ComparisonItem(title: String, staticText: String, dynamicText: String) {
    Row(
        modifier = Modifier.fillMaxWidth(),
        verticalAlignment = Alignment.CenterVertically
    ) {
        Text(
            text = title,
            modifier = Modifier.width(100.dp),
            fontSize = 12.sp,
            fontWeight = FontWeight.Medium,
            color = Color(0xFF1976D2)
        )

        Surface(
            modifier = Modifier.weight(1f),
            shape = RoundedCornerShape(6.dp),
            color = Color(0xFFD32F2F).copy(alpha = 0.1f)
        ) {
            Text(
                text = staticText,
                modifier = Modifier.padding(8.dp),
                fontSize = 11.sp,
                color = Color(0xFFD32F2F),
                textAlign = TextAlign.Center
            )
        }

        Spacer(modifier = Modifier.width(8.dp))

        Surface(
            modifier = Modifier.weight(1f),
            shape = RoundedCornerShape(6.dp),
            color = Color(0xFF4CAF50).copy(alpha = 0.1f)
        ) {
            Text(
                text = dynamicText,
                modifier = Modifier.padding(8.dp),
                fontSize = 11.sp,
                color = Color(0xFF4CAF50),
                textAlign = TextAlign.Center
            )
        }
    }
}

@Composable
private fun DecisionGuideCard() {
    Card(
        modifier = Modifier.fillMaxWidth(),
        elevation = 4.dp,
        backgroundColor = Color(0xFFF1F8E9),
        shape = RoundedCornerShape(12.dp)
    ) {
        Column(
            modifier = Modifier.padding(16.dp)
        ) {
            Text(
                text = "üéØ ÏÑ†ÌÉù Í∞ÄÏù¥Îìú",
                fontSize = 16.sp,
                fontWeight = FontWeight.Bold,
                color = Color(0xFF388E3C)
            )

            Spacer(modifier = Modifier.height(12.dp))

            DecisionGuideItem(
                icon = "üî¥",
                title = "StaticÏùÑ ÏÑ†ÌÉùÌïòÏÑ∏Ïöî",
                points = listOf(
                    "Í±∞Ïùò Î≥ÄÍ≤ΩÎêòÏßÄ ÏïäÏùå (Ïï±Îãπ 1-2Ìöå)",
                    "ÎåÄÎ∂ÄÎ∂ÑÏùò ÌïòÏúÑÍ∞Ä Í∞íÏùÑ ÏÇ¨Ïö©",
                    "Ï†ÑÏ≤¥ UI ÏÉàÎ°úÍ≥†Ïπ®Ïù¥ ÏûêÏó∞Ïä§Îü¨ÏõÄ",
                    "Ïòà: Theme, Context, Configuration"
                ),
                color = Color(0xFFD32F2F)
            )

            Spacer(modifier = Modifier.height(12.dp))

            DecisionGuideItem(
                icon = "üü¢",
                title = "DynamicÏùÑ ÏÑ†ÌÉùÌïòÏÑ∏Ïöî",
                points = listOf(
                    "ÏûêÏ£º Î≥ÄÍ≤ΩÎê® (ÏÇ¨Ïö©Ïûê Ïù∏ÌÑ∞ÎûôÏÖò)",
                    "ÏùºÎ∂ÄÎßå Í∞íÏùÑ ÏÇ¨Ïö©",
                    "Î∂ÄÎ∂Ñ ÏóÖÎç∞Ïù¥Ìä∏Í∞Ä ÏÑ±Îä•Ïóê Ï§ëÏöî",
                    "Ïòà: User state, UI state, Alpha"
                ),
                color = Color(0xFF4CAF50)
            )

            Spacer(modifier = Modifier.height(12.dp))

            Surface(
                modifier = Modifier.fillMaxWidth(),
                shape = RoundedCornerShape(8.dp),
                color = Color(0xFF388E3C).copy(alpha = 0.1f)
            ) {
                Row(
                    modifier = Modifier.padding(12.dp),
                    verticalAlignment = Alignment.CenterVertically
                ) {
                    Icon(
                        imageVector = Icons.Filled.CheckCircle,
                        contentDescription = "Tip",
                        tint = Color(0xFF388E3C),
                        modifier = Modifier.size(20.dp)
                    )
                    Spacer(modifier = Modifier.width(8.dp))
                    Text(
                        text = "ÌôïÏã†Ïù¥ ÏóÜÎã§Î©¥ Dynamic(compositionLocalOf) ÏÇ¨Ïö©ÏùÑ Í∂åÏû•Ìï©ÎãàÎã§",
                        fontSize = 12.sp,
                        color = Color(0xFF388E3C),
                        fontWeight = FontWeight.Medium,
                        lineHeight = 16.sp
                    )
                }
            }
        }
    }
}

@Composable
private fun DecisionGuideItem(icon: String, title: String, points: List<String>, color: Color) {
    Column(
        modifier = Modifier
            .fillMaxWidth()
            .background(Color.White, RoundedCornerShape(8.dp))
            .border(2.dp, color.copy(alpha = 0.3f), RoundedCornerShape(8.dp))
            .padding(12.dp)
    ) {
        Row(
            verticalAlignment = Alignment.CenterVertically
        ) {
            Text(
                text = icon,
                fontSize = 20.sp
            )
            Spacer(modifier = Modifier.width(8.dp))
            Text(
                text = title,
                fontSize = 14.sp,
                fontWeight = FontWeight.Bold,
                color = color
            )
        }

        Spacer(modifier = Modifier.height(8.dp))

        points.forEach { point ->
            Row(
                modifier = Modifier.padding(vertical = 2.dp),
                verticalAlignment = Alignment.Top
            ) {
                Box(
                    modifier = Modifier
                        .size(6.dp)
                        .padding(top = 6.dp)
                        .background(color, CircleShape)
                )
                Spacer(modifier = Modifier.width(8.dp))
                Text(
                    text = point,
                    fontSize = 12.sp,
                    color = Color.Gray,
                    lineHeight = 16.sp
                )
            }
        }
    }
}
