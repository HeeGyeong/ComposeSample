package com.example.composesample.presentation.example.component.ui.text

import androidx.compose.foundation.background
import androidx.compose.foundation.border
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.PaddingValues
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.size
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.foundation.text.BasicText
import androidx.compose.foundation.text.TextAutoSize
import androidx.compose.material.Button
import androidx.compose.material.ButtonDefaults
import androidx.compose.material.Card
import androidx.compose.material.Surface
import androidx.compose.material.Switch
import androidx.compose.material.SwitchDefaults
import androidx.compose.material.Text
import androidx.compose.runtime.Composable
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.setValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.text.TextStyle
import androidx.compose.ui.text.font.FontFamily
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextOverflow
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import com.example.composesample.presentation.MainHeader

/**
 * Auto-sizing Text in Jetpack Compose with BasicText Example
 *
 * BasicTextÏùò autoSize Í∏∞Îä•ÏùÑ ÌôúÏö©Ìïú ÎèôÏ†Å ÌÖçÏä§Ìä∏ ÌÅ¨Í∏∞ Ï°∞Ï†à:
 * 1. TextAutoSize.StepBased() - ÏûêÎèô ÌÅ¨Í∏∞ Ï°∞Ï†à
 * 2. minFontSize, maxFontSize - ÏµúÏÜå/ÏµúÎåÄ ÌÅ¨Í∏∞ Ï†úÌïú
 * 3. softWrap, maxLines - Ï§ÑÎ∞îÍøà Î∞è ÎùºÏù∏ Ï†úÌïú
 * 4. TextOverflow.Ellipsis - ÌÖçÏä§Ìä∏ Ïò§Î≤ÑÌîåÎ°úÏö∞ Ï≤òÎ¶¨
 * 5. onTextLayout - ÌÖçÏä§Ìä∏ Î†àÏù¥ÏïÑÏõÉ ÏΩúÎ∞±
 */
@Composable
fun AutoSizingTextExampleUI(
    onBackEvent: () -> Unit
) {
    Column(
        modifier = Modifier
            .fillMaxSize()
            .background(Color.White)
    ) {
        MainHeader(
            title = "Auto-sizing Text Example",
            onBackIconClicked = onBackEvent
        )

        LazyColumn(
            modifier = Modifier.fillMaxSize(),
            contentPadding = PaddingValues(16.dp),
            verticalArrangement = Arrangement.spacedBy(16.dp)
        ) {
            item { AutoSizeOverviewCard() }
            item { BasicComparisonCard() }
            item { AutoSizeWithMaxSizeCard() }
            item { ConstrainedBoxExampleCard() }
            item { MinFontSizeWithEllipsisCard() }
            item { SoftWrapExampleCard() }
            item { MaxLinesExampleCard() }
            item { OnTextLayoutCard() }
            item { PracticalExamplesCard() }
        }
    }
}

@Composable
private fun AutoSizeOverviewCard() {
    Card(
        modifier = Modifier.fillMaxWidth(),
        elevation = 4.dp,
        shape = RoundedCornerShape(12.dp)
    ) {
        Column(
            modifier = Modifier.padding(16.dp)
        ) {
            Text(
                text = "üìè BasicText Auto-sizingÏù¥ÎûÄ?",
                fontSize = 18.sp,
                fontWeight = FontWeight.Bold,
                color = Color(0xFF1976D2)
            )

            Spacer(modifier = Modifier.height(8.dp))

            Text(
                text = "BasicTextÏùò autoSize Í∏∞Îä•ÏùÄ ÌÖçÏä§Ìä∏Í∞Ä Ï£ºÏñ¥ÏßÑ Í≥µÍ∞ÑÏóê ÎßûÍ≤å ÏûêÎèôÏúºÎ°ú ÌÅ¨Í∏∞Î•º Ï°∞Ï†àÌï¥Ï£ºÎäî Í∞ïÎ†•Ìïú Í∏∞Îä•ÏûÖÎãàÎã§.",
                fontSize = 14.sp,
                color = Color.Gray
            )

            Spacer(modifier = Modifier.height(12.dp))

            Row(
                modifier = Modifier.fillMaxWidth(),
                horizontalArrangement = Arrangement.spacedBy(8.dp)
            ) {
                FeatureChip("ÏûêÎèô ÌÅ¨Í∏∞ Ï°∞Ï†à", Color(0xFF4CAF50))
                FeatureChip("Í≥µÍ∞Ñ ÏµúÏ†ÅÌôî", Color(0xFF2196F3))
                FeatureChip("Ïú†Ïó∞Ìïú Ï†úÏñ¥", Color(0xFFFF9800))
            }

            Spacer(modifier = Modifier.height(12.dp))

            Surface(
                modifier = Modifier.fillMaxWidth(),
                shape = RoundedCornerShape(8.dp),
                color = Color(0xFFF5F5F5)
            ) {
                Text(
                    text = "‚ö†Ô∏è Ï∞∏Í≥†: Compose BOM Î≤ÑÏ†Ñ 2025.04.01 Ïù¥ÏÉÅÏù¥ ÌïÑÏöîÌï©ÎãàÎã§.",
                    modifier = Modifier.padding(12.dp),
                    fontSize = 12.sp,
                    color = Color(0xFF666666),
                    fontStyle = androidx.compose.ui.text.font.FontStyle.Italic
                )
            }
        }
    }
}

@Composable
private fun FeatureChip(text: String, color: Color) {
    Surface(
        modifier = Modifier,
        shape = RoundedCornerShape(16.dp),
        color = color.copy(alpha = 0.1f)
    ) {
        Text(
            text = text,
            modifier = Modifier.padding(horizontal = 12.dp, vertical = 6.dp),
            fontSize = 12.sp,
            color = color,
            fontWeight = FontWeight.Medium
        )
    }
}

@Composable
private fun BasicComparisonCard() {
    Card(
        modifier = Modifier.fillMaxWidth(),
        elevation = 4.dp,
        backgroundColor = Color(0xFFF3E5F5),
        shape = RoundedCornerShape(12.dp)
    ) {
        Column(
            modifier = Modifier.padding(16.dp)
        ) {
            Text(
                text = "‚öñÔ∏è Text vs BasicText ÎπÑÍµê",
                fontSize = 16.sp,
                fontWeight = FontWeight.Bold,
                color = Color(0xFF7B1FA2)
            )

            Spacer(modifier = Modifier.height(12.dp))

            // ÏùºÎ∞ò Text
            Text(
                text = "ÏùºÎ∞ò Text (Í≥†Ï†ï ÌÅ¨Í∏∞):",
                fontSize = 12.sp,
                fontWeight = FontWeight.Medium,
                color = Color.Gray
            )

            Box(
                modifier = Modifier
                    .fillMaxWidth()
                    .height(60.dp)
                    .border(1.dp, Color.Gray, RoundedCornerShape(8.dp))
                    .padding(8.dp),
                contentAlignment = Alignment.Center
            ) {
                Text(
                    text = "Normal Text",
                    color = Color.Black,
                    fontSize = 12.sp
                )
            }

            Spacer(modifier = Modifier.height(8.dp))

            // BasicText with AutoSize
            Text(
                text = "BasicText (ÏûêÎèô ÌÅ¨Í∏∞ Ï°∞Ï†à):",
                fontSize = 12.sp,
                fontWeight = FontWeight.Medium,
                color = Color.Gray
            )

            Box(
                modifier = Modifier
                    .fillMaxWidth()
                    .height(60.dp)
                    .border(1.dp, Color(0xFF7B1FA2), RoundedCornerShape(8.dp))
                    .padding(8.dp),
                contentAlignment = Alignment.Center
            ) {
                BasicText(
                    text = "Auto Resizing Text that adjusts to container size",
                    style = TextStyle(fontSize = 24.sp),
                    autoSize = TextAutoSize.StepBased(
                        maxFontSize = 20.sp
                    ),
                    color = { Color(0xFF7B1FA2) }
                )
            }
        }
    }
}

@Composable
private fun AutoSizeWithMaxSizeCard() {
    Card(
        modifier = Modifier.fillMaxWidth(),
        elevation = 4.dp,
        backgroundColor = Color(0xFFE8F5E8),
        shape = RoundedCornerShape(12.dp)
    ) {
        Column(
            modifier = Modifier.padding(16.dp)
        ) {
            Text(
                text = "üìê ÏµúÎåÄ ÌÅ¨Í∏∞ Ï†úÌïú ÏòàÏ†ú",
                fontSize = 16.sp,
                fontWeight = FontWeight.Bold,
                color = Color(0xFF388E3C)
            )

            Spacer(modifier = Modifier.height(12.dp))

            CodeBlock(
                """
                BasicText(
                    text = "Auto Resizing Text but with max size limit",
                    style = TextStyle(fontSize = 32.sp),
                    autoSize = TextAutoSize.StepBased(
                        maxFontSize = 16.sp
                    ),
                    color = { Color.Green }
                )
                """.trimIndent()
            )

            Spacer(modifier = Modifier.height(12.dp))

            Box(
                modifier = Modifier
                    .fillMaxWidth()
                    .height(80.dp)
                    .border(1.dp, Color(0xFF388E3C), RoundedCornerShape(8.dp))
                    .padding(8.dp),
                contentAlignment = Alignment.Center
            ) {
                BasicText(
                    text = "Auto Resizing Text but with max size limit of 16sp",
                    style = TextStyle(fontSize = 32.sp),
                    autoSize = TextAutoSize.StepBased(
                        maxFontSize = 16.sp
                    ),
                    color = { Color(0xFF388E3C) }
                )
            }
        }
    }
}

@Composable
private fun ConstrainedBoxExampleCard() {
    Card(
        modifier = Modifier.fillMaxWidth(),
        elevation = 4.dp,
        backgroundColor = Color(0xFFFFF3E0),
        shape = RoundedCornerShape(12.dp)
    ) {
        Column(
            modifier = Modifier.padding(16.dp)
        ) {
            Text(
                text = "üì¶ Ï†úÏïΩÏù¥ ÏûàÎäî BoxÏóêÏÑúÏùò ÎèôÏûë",
                fontSize = 16.sp,
                fontWeight = FontWeight.Bold,
                color = Color(0xFFE65100)
            )

            Spacer(modifier = Modifier.height(12.dp))

            Text(
                text = "240x240dp Box ÏïàÏóêÏÑúÏùò ÏûêÎèô ÌÅ¨Í∏∞ Ï°∞Ï†à:",
                fontSize = 14.sp,
                color = Color.Gray
            )

            Spacer(modifier = Modifier.height(8.dp))

            Row(
                modifier = Modifier.fillMaxWidth(),
                horizontalArrangement = Arrangement.spacedBy(12.dp)
            ) {
                // ÏßßÏùÄ ÌÖçÏä§Ìä∏
                Box(
                    modifier = Modifier
                        .size(120.dp)
                        .border(1.dp, Color(0xFFE65100), RoundedCornerShape(8.dp))
                        .padding(8.dp),
                    contentAlignment = Alignment.Center
                ) {
                    BasicText(
                        text = "Short Text",
                        style = TextStyle(fontSize = 32.sp),
                        autoSize = TextAutoSize.StepBased(
                            maxFontSize = 24.sp
                        ),
                        color = { Color(0xFFE65100) }
                    )
                }

                // Í∏¥ ÌÖçÏä§Ìä∏
                Box(
                    modifier = Modifier
                        .size(120.dp)
                        .border(1.dp, Color(0xFFE65100), RoundedCornerShape(8.dp))
                        .padding(8.dp),
                    contentAlignment = Alignment.Center
                ) {
                    BasicText(
                        text = "Much longer text that needs to auto-resize to fit in the box properly",
                        style = TextStyle(fontSize = 32.sp),
                        autoSize = TextAutoSize.StepBased(
                            maxFontSize = 14.sp
                        ),
                        color = { Color(0xFFE65100) }
                    )
                }
            }
        }
    }
}

@Composable
private fun MinFontSizeWithEllipsisCard() {
    Card(
        modifier = Modifier.fillMaxWidth(),
        elevation = 4.dp,
        backgroundColor = Color(0xFFFFEBEE),
        shape = RoundedCornerShape(12.dp)
    ) {
        Column(
            modifier = Modifier.padding(16.dp)
        ) {
            Text(
                text = "‚úÇÔ∏è ÏµúÏÜå ÌÅ¨Í∏∞ Ï†úÌïúÍ≥º ÎßêÏ§ÑÏûÑÌëú",
                fontSize = 16.sp,
                fontWeight = FontWeight.Bold,
                color = Color(0xFFD32F2F)
            )

            Spacer(modifier = Modifier.height(12.dp))

            Text(
                text = "minFontSize ÏÑ§Ï†ïÍ≥º TextOverflow.Ellipsis Ï≤òÎ¶¨:",
                fontSize = 14.sp,
                color = Color.Gray
            )

            Spacer(modifier = Modifier.height(8.dp))

            CodeBlock(
                """
                BasicText(
                    text = "Very long text that cannot fit...",
                    style = TextStyle(fontSize = 32.sp),
                    autoSize = TextAutoSize.StepBased(
                        minFontSize = 10.sp,
                    ),
                    overflow = TextOverflow.Ellipsis
                )
                """.trimIndent()
            )

            Spacer(modifier = Modifier.height(12.dp))

            Box(
                modifier = Modifier
                    .fillMaxWidth()
                    .height(80.dp)
                    .border(1.dp, Color(0xFFD32F2F), RoundedCornerShape(8.dp))
                    .padding(8.dp),
                contentAlignment = Alignment.Center
            ) {
                BasicText(
                    text = "Auto Resizing Text in box but in a smaller box and longer with smallest font size limit that shows ellipsis when too small",
                    style = TextStyle(fontSize = 32.sp),
                    autoSize = TextAutoSize.StepBased(
                        minFontSize = 10.sp
                    ),
                    color = { Color(0xFFD32F2F) },
                    overflow = TextOverflow.Ellipsis
                )
            }
        }
    }
}

@Composable
private fun SoftWrapExampleCard() {
    var softWrapEnabled by remember { mutableStateOf(true) }

    Card(
        modifier = Modifier.fillMaxWidth(),
        elevation = 4.dp,
        backgroundColor = Color(0xFFE3F2FD),
        shape = RoundedCornerShape(12.dp)
    ) {
        Column(
            modifier = Modifier.padding(16.dp)
        ) {
            Text(
                text = "üîÑ SoftWrap Ï†úÏñ¥",
                fontSize = 16.sp,
                fontWeight = FontWeight.Bold,
                color = Color(0xFF1976D2)
            )

            Spacer(modifier = Modifier.height(12.dp))

            Row(
                modifier = Modifier.fillMaxWidth(),
                horizontalArrangement = Arrangement.SpaceBetween,
                verticalAlignment = Alignment.CenterVertically
            ) {
                Text(
                    text = "softWrap ÌôúÏÑ±Ìôî:",
                    fontSize = 14.sp,
                    fontWeight = FontWeight.Medium
                )

                Switch(
                    checked = softWrapEnabled,
                    onCheckedChange = { softWrapEnabled = it },
                    colors = SwitchDefaults.colors(
                        checkedThumbColor = Color(0xFF1976D2)
                    )
                )
            }

            Spacer(modifier = Modifier.height(12.dp))

            Box(
                modifier = Modifier
                    .fillMaxWidth()
                    .height(80.dp)
                    .border(1.dp, Color(0xFF1976D2), RoundedCornerShape(8.dp))
                    .padding(8.dp),
                contentAlignment = Alignment.Center
            ) {
                BasicText(
                    text = "Auto Resizing Text in box but much much longer with soft wrap control - toggle switch to see difference",
                    style = TextStyle(fontSize = 24.sp),
                    autoSize = TextAutoSize.StepBased(
                        maxFontSize = 16.sp
                    ),
                    color = { Color(0xFF1976D2) },
                    softWrap = softWrapEnabled
                )
            }
        }
    }
}

@Composable
private fun MaxLinesExampleCard() {
    Card(
        modifier = Modifier.fillMaxWidth(),
        elevation = 4.dp,
        backgroundColor = Color(0xFFF1F8E9),
        shape = RoundedCornerShape(12.dp)
    ) {
        Column(
            modifier = Modifier.padding(16.dp)
        ) {
            Text(
                text = "üìè ÎùºÏù∏ Ïàò Ï†úÌïú",
                fontSize = 16.sp,
                fontWeight = FontWeight.Bold,
                color = Color(0xFF388E3C)
            )

            Spacer(modifier = Modifier.height(12.dp))

            Text(
                text = "maxLinesÏôÄ TextOverflow.Ellipsis Ï°∞Ìï©:",
                fontSize = 14.sp,
                color = Color.Gray
            )

            Spacer(modifier = Modifier.height(8.dp))

            CodeBlock(
                """
                BasicText(
                    text = "Very long text...",
                    style = TextStyle(fontSize = 24.sp),
                    autoSize = TextAutoSize.StepBased(),
                    maxLines = 1,
                    overflow = TextOverflow.Ellipsis
                )
                """.trimIndent()
            )

            Spacer(modifier = Modifier.height(12.dp))

            Box(
                modifier = Modifier
                    .fillMaxWidth()
                    .border(1.dp, Color(0xFF388E3C), RoundedCornerShape(8.dp))
                    .padding(8.dp)
            ) {
                BasicText(
                    text = "Auto Resizing Text in box but with line limits on the box to demonstrate maxLines behavior with very long text",
                    style = TextStyle(fontSize = 24.sp),
                    autoSize = TextAutoSize.StepBased(
                        maxFontSize = 16.sp
                    ),
                    color = { Color(0xFF388E3C) },
                    maxLines = 1,
                    overflow = TextOverflow.Ellipsis
                )
            }
        }
    }
}

@Composable
private fun OnTextLayoutCard() {
    var measuredWidth by remember { mutableStateOf(0) }
    var measuredHeight by remember { mutableStateOf(0) }

    Card(
        modifier = Modifier.fillMaxWidth(),
        elevation = 4.dp,
        backgroundColor = Color(0xFFFCE4EC),
        shape = RoundedCornerShape(12.dp)
    ) {
        Column(
            modifier = Modifier.padding(16.dp)
        ) {
            Text(
                text = "üìê onTextLayout ÏΩúÎ∞±",
                fontSize = 16.sp,
                fontWeight = FontWeight.Bold,
                color = Color(0xFFE91E63)
            )

            Spacer(modifier = Modifier.height(12.dp))

            Text(
                text = "ÌÖçÏä§Ìä∏ Î†àÏù¥ÏïÑÏõÉ Ï†ïÎ≥¥ Ïã§ÏãúÍ∞Ñ ÌôïÏù∏:",
                fontSize = 14.sp,
                color = Color.Gray
            )

            Spacer(modifier = Modifier.height(12.dp))

            Box(
                modifier = Modifier
                    .fillMaxWidth()
                    .height(100.dp)
                    .border(1.dp, Color(0xFFE91E63), RoundedCornerShape(8.dp))
                    .padding(8.dp)
            ) {
                Column {
                    BasicText(
                        text = "Auto Resizing Text with onTextLayout callback to measure actual text size",
                        style = TextStyle(fontSize = 24.sp),
                        autoSize = TextAutoSize.StepBased(
                            maxFontSize = 18.sp
                        ),
                        color = { Color(0xFFE91E63) },
                        onTextLayout = { layoutResult ->
                            measuredWidth = layoutResult.size.width
                            measuredHeight = layoutResult.size.height
                        }
                    )

                    Spacer(modifier = Modifier.height(8.dp))

                    Text(
                        text = "Ï∏°Ï†ïÎêú ÌÅ¨Í∏∞: ${measuredWidth}px √ó ${measuredHeight}px",
                        color = Color(0xFFE91E63),
                        fontSize = 12.sp,
                        fontWeight = FontWeight.Medium
                    )
                }
            }
        }
    }
}

@Composable
private fun PracticalExamplesCard() {
    Card(
        modifier = Modifier.fillMaxWidth(),
        elevation = 4.dp,
        shape = RoundedCornerShape(12.dp)
    ) {
        Column(
            modifier = Modifier.padding(16.dp)
        ) {
            Text(
                text = "üéØ Ïã§Ïö©Ï†ÅÏù∏ ÌôúÏö© ÏòàÏãú",
                fontSize = 16.sp,
                fontWeight = FontWeight.Bold,
                color = Color(0xFF1976D2)
            )

            Spacer(modifier = Modifier.height(12.dp))

            // Ïπ¥Îìú Ï†úÎ™© ÏòàÏãú
            Card(
                modifier = Modifier
                    .fillMaxWidth()
                    .height(60.dp),
                elevation = 2.dp,
                backgroundColor = Color(0xFF6200EE)
            ) {
                Box(
                    modifier = Modifier
                        .fillMaxSize()
                        .padding(8.dp),
                    contentAlignment = Alignment.Center
                ) {
                    BasicText(
                        text = "Ïπ¥Îìú Ï†úÎ™©Ïù¥ ÏûêÎèôÏúºÎ°ú ÌÅ¨Í∏∞ Ï°∞Ï†àÎê©ÎãàÎã§ - Îß§Ïö∞ Í∏¥ Ï†úÎ™©ÎèÑ ÏûêÎèôÏúºÎ°ú ÎßûÏ∂∞ÏßëÎãàÎã§",
                        style = TextStyle(fontSize = 20.sp),
                        autoSize = TextAutoSize.StepBased(
                            maxFontSize = 16.sp
                        ),
                        color = { Color.White }
                    )
                }
            }

            Spacer(modifier = Modifier.height(8.dp))

            // Î≤ÑÌäº ÌÖçÏä§Ìä∏ ÏòàÏãú
            Button(
                onClick = { },
                modifier = Modifier
                    .fillMaxWidth()
                    .height(48.dp),
                colors = ButtonDefaults.buttonColors(backgroundColor = Color(0xFF03DAC6))
            ) {
                BasicText(
                    text = "Î≤ÑÌäº ÌÖçÏä§Ìä∏ÎèÑ ÏûêÎèô ÌÅ¨Í∏∞ Ï°∞Ï†à - Îß§Ïö∞ Í∏¥ Î≤ÑÌäº ÌÖçÏä§Ìä∏ÏûÖÎãàÎã§",
                    style = TextStyle(fontSize = 18.sp),
                    autoSize = TextAutoSize.StepBased(
                        maxFontSize = 14.sp
                    ),
                    color = { Color.Black }
                )
            }

            Spacer(modifier = Modifier.height(12.dp))

            Text(
                text = "üí° ÌôúÏö© ÌåÅ:",
                fontSize = 14.sp,
                fontWeight = FontWeight.Bold
            )

            Text(
                text = "‚Ä¢ Ïπ¥ÎìúÎÇò Î≤ÑÌäºÏùò Ï†úÎ™©\n‚Ä¢ ÎèôÏ†Å ÏΩòÌÖêÏ∏† ÌëúÏãú\n‚Ä¢ Î∞òÏùëÌòï UI Íµ¨ÏÑ±\n‚Ä¢ Îã§Íµ≠Ïñ¥ ÏßÄÏõê Ïãú Ïú†Ïö©",
                fontSize = 12.sp,
                color = Color.Gray,
                modifier = Modifier.padding(start = 8.dp)
            )
        }
    }
}

@Composable
private fun CodeBlock(code: String) {
    Surface(
        modifier = Modifier
            .fillMaxWidth()
            .clip(RoundedCornerShape(8.dp)),
        color = Color(0xFF263238)
    ) {
        Text(
            text = code,
            modifier = Modifier.padding(12.dp),
            fontSize = 11.sp,
            fontFamily = FontFamily.Monospace,
            color = Color(0xFF80CBC4),
            lineHeight = 16.sp
        )
    }
}

@Preview(showBackground = true)
@Composable
private fun AutoSizingTextExamplePreview() {
    AutoSizingTextExampleUI(
        onBackEvent = {}
    )
} 