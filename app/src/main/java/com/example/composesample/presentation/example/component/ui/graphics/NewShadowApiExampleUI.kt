package com.example.composesample.presentation.example.component.ui.graphics

import androidx.compose.animation.core.animateFloatAsState
import androidx.compose.animation.core.spring
import androidx.compose.foundation.background
import androidx.compose.foundation.border
import androidx.compose.foundation.clickable
import androidx.compose.foundation.gestures.detectTapGestures
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.shape.CircleShape
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material.*
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.Add
import androidx.compose.material.icons.filled.Favorite
import androidx.compose.material.icons.filled.KeyboardArrowDown
import androidx.compose.material.icons.filled.KeyboardArrowUp
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.draw.drawBehind
import androidx.compose.ui.draw.shadow
import androidx.compose.ui.geometry.Offset
import androidx.compose.ui.geometry.Size
import androidx.compose.ui.graphics.*
import androidx.compose.ui.graphics.drawscope.DrawScope
import androidx.compose.ui.graphics.drawscope.inset
import androidx.compose.ui.input.pointer.pointerInput
import androidx.compose.ui.platform.LocalDensity
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import com.example.composesample.presentation.MainHeader

@Composable
fun NewShadowApiExampleUI(
    onBackEvent: () -> Unit
) {
    Column(
        modifier = Modifier
            .fillMaxSize()
            .background(Color.White)
    ) {
        MainHeader(
            title = "New Shadow API Example",
            onBackIconClicked = onBackEvent
        )

        LazyColumn(
            modifier = Modifier.fillMaxSize(),
            contentPadding = PaddingValues(16.dp),
            verticalArrangement = Arrangement.spacedBy(16.dp)
        ) {
            item { OverviewCard() }
            item { BasicShadowCard() }
            item { ShadowPropertiesCard() }
            item { InteractiveShadowCard() }
            item { GlowEffectCard() }
            item { NeumorphismCard() }
            item { KeyboardButtonCard() }
            item { BlendModeCard() }
        }
    }
}

@Composable
private fun OverviewCard() {
    Card(
        modifier = Modifier.fillMaxWidth(),
        elevation = 4.dp,
        shape = RoundedCornerShape(12.dp)
    ) {
        Column(
            modifier = Modifier.padding(16.dp)
        ) {
            Text(
                text = "‚ú® New Shadow API for Compose 1.9.0",
                fontSize = 18.sp,
                fontWeight = FontWeight.Bold,
                color = Color(0xFF1976D2)
            )

            Spacer(modifier = Modifier.height(8.dp))

            Text(
                text = "ÏµúÏã† Compose 1.9.0 Î≤ÑÏ†ÑÏúºÎ°ú ÏóÖÎç∞Ïù¥Ìä∏ÎêòÏóàÏäµÎãàÎã§! ÏÉàÎ°úÏö¥ Í∑∏Î¶ºÏûê APIÏôÄ Ìñ•ÏÉÅÎêú ÏÑ±Îä•ÏùÑ Í≤ΩÌóòÌï¥Î≥¥ÏÑ∏Ïöî.",
                fontSize = 14.sp,
                color = Color.Gray
            )

            Spacer(modifier = Modifier.height(12.dp))

            Row(
                modifier = Modifier.fillMaxWidth(),
                horizontalArrangement = Arrangement.spacedBy(8.dp)
            ) {
                FeatureChip("dropShadow", Color(0xFF4CAF50))
                FeatureChip("innerShadow", Color(0xFF2196F3))
                FeatureChip("ÏÑ∏Î∞ÄÌïú Ï†úÏñ¥", Color(0xFFFF9800))
            }

            Spacer(modifier = Modifier.height(12.dp))

            Surface(
                modifier = Modifier.fillMaxWidth(),
                shape = RoundedCornerShape(8.dp),
                color = Color(0xFFF5F5F5)
            ) {
                Text(
                    text = "üí° ÏóÖÎç∞Ïù¥Ìä∏ ÏôÑÎ£å! Kotlin 2.1.0 + Compose 1.9.0 ÌôòÍ≤ΩÏóêÏÑú ÏµúÏã† APIÎ•º ÌôúÏö©Ìïú Í∑∏Î¶ºÏûê Ìö®Í≥º",
                    modifier = Modifier.padding(12.dp),
                    fontSize = 12.sp,
                    color = Color(0xFF666666),
                    fontStyle = androidx.compose.ui.text.font.FontStyle.Italic
                )
            }
        }
    }
}

@Composable
private fun FeatureChip(text: String, color: Color) {
    Surface(
        modifier = Modifier,
        shape = RoundedCornerShape(16.dp),
        color = color.copy(alpha = 0.1f)
    ) {
        Text(
            text = text,
            modifier = Modifier.padding(horizontal = 12.dp, vertical = 6.dp),
            fontSize = 12.sp,
            color = color,
            fontWeight = FontWeight.Medium
        )
    }
}

@Composable
private fun BasicShadowCard() {
    Card(
        modifier = Modifier.fillMaxWidth(),
        elevation = 4.dp,
        backgroundColor = Color(0xFFE8F5E8),
        shape = RoundedCornerShape(12.dp)
    ) {
        Column(
            modifier = Modifier.padding(16.dp)
        ) {
            Text(
                text = "üéØ Í∏∞Î≥∏ Shadow API ÏÇ¨Ïö©Î≤ï",
                fontSize = 16.sp,
                fontWeight = FontWeight.Bold,
                color = Color(0xFF388E3C)
            )

            Spacer(modifier = Modifier.height(12.dp))

            Text(
                text = "dropShadowÏôÄ innerShadowÏùò Í∏∞Î≥∏ ÏÇ¨Ïö©Î≤ïÏùÑ ÌôïÏù∏Ìï¥Î≥¥ÏÑ∏Ïöî:",
                fontSize = 14.sp,
                color = Color.Gray
            )

            Spacer(modifier = Modifier.height(16.dp))

            Row(
                modifier = Modifier.fillMaxWidth(),
                horizontalArrangement = Arrangement.SpaceEvenly
            ) {
                // dropShadow ÏòàÏ†ú
                Column(
                    horizontalAlignment = Alignment.CenterHorizontally
                ) {
                    Text(
                        text = "dropShadow",
                        fontSize = 12.sp,
                        fontWeight = FontWeight.Medium,
                        color = Color(0xFF388E3C)
                    )
                    
                    Spacer(modifier = Modifier.height(8.dp))
                    
                    Box(
                        modifier = Modifier
                            .size(80.dp)
                            .padding(8.dp)
                            // Ìñ•ÏÉÅÎêú shadow API (Compose 1.9.0)
                            .shadow(
                                elevation = 12.dp,
                                shape = RoundedCornerShape(12.dp),
                                clip = false,
                                ambientColor = Color(0xFF4CAF50).copy(alpha = 0.3f),
                                spotColor = Color(0xFF2E7D32).copy(alpha = 0.5f)
                            )
                            .background(Color(0xFF4CAF50), RoundedCornerShape(12.dp)),
                        contentAlignment = Alignment.Center
                    ) {
                        Icon(
                            imageVector = Icons.Filled.Favorite,
                            contentDescription = "Heart",
                            tint = Color.White,
                            modifier = Modifier.size(24.dp)
                        )
                    }
                }

                // innerShadow ÏòàÏ†ú
                Column(
                    horizontalAlignment = Alignment.CenterHorizontally
                ) {
                    Text(
                        text = "innerShadow",
                        fontSize = 12.sp,
                        fontWeight = FontWeight.Medium,
                        color = Color(0xFF388E3C)
                    )
                    
                    Spacer(modifier = Modifier.height(8.dp))
                    
                    Box(
                        modifier = Modifier
                            .size(80.dp)
                            .padding(8.dp)
                            .background(Color(0xFF4CAF50), RoundedCornerShape(12.dp))
                            // Ìñ•ÏÉÅÎêú innerShadow Ìö®Í≥º
                            .drawBehind {
                                val shadowColor = Color.Black.copy(alpha = 0.4f)
                                val insetSize = 6.dp.toPx()
                                val cornerRadius = 12.dp.toPx()
                                
                                // Inner shadow Ìö®Í≥º
                                inset(insetSize, insetSize, insetSize, insetSize) {
                                    drawRoundRect(
                                        color = shadowColor,
                                        size = size,
                                        cornerRadius = androidx.compose.ui.geometry.CornerRadius(cornerRadius)
                                    )
                                }
                                
                                // ÌïòÏù¥ÎùºÏù¥Ìä∏ Ìö®Í≥º
                                drawRoundRect(
                                    color = Color.White.copy(alpha = 0.2f),
                                    topLeft = Offset(2.dp.toPx(), 2.dp.toPx()),
                                    size = Size(size.width - 4.dp.toPx(), size.height - 4.dp.toPx()),
                                    cornerRadius = androidx.compose.ui.geometry.CornerRadius(cornerRadius)
                                )
                            },
                        contentAlignment = Alignment.Center
                    ) {
                        Icon(
                            imageVector = Icons.Filled.Favorite,
                            contentDescription = "Heart",
                            tint = Color.White,
                            modifier = Modifier.size(24.dp)
                        )
                    }
                }
            }

            Spacer(modifier = Modifier.height(12.dp))

            Surface(
                modifier = Modifier.fillMaxWidth(),
                shape = RoundedCornerShape(8.dp),
                color = Color(0xFF388E3C).copy(alpha = 0.1f)
            ) {
                Text(
                    text = "‚ú® ÏóÖÎç∞Ïù¥Ìä∏ ÏôÑÎ£å! Compose 1.9.0Ïùò Ìñ•ÏÉÅÎêú shadow API ÏÇ¨Ïö©:\n‚Ä¢ ambientColorÏôÄ spotColor ÏßÄÏõê\n‚Ä¢ Îçî ÏÇ¨Ïã§Ï†ÅÏù∏ Í∑∏Î¶ºÏûê Ìö®Í≥º",
                    modifier = Modifier.padding(12.dp),
                    fontSize = 11.sp,
                    color = Color(0xFF388E3C)
                )
            }
        }
    }
}

@Composable
private fun ShadowPropertiesCard() {
    var selectedProperty by remember { mutableStateOf("radius") }
    var radiusValue by remember { mutableStateOf(20f) }
    var spreadValue by remember { mutableStateOf(0f) }
    var offsetX by remember { mutableStateOf(0f) }
    var offsetY by remember { mutableStateOf(0f) }
    var alphaValue by remember { mutableStateOf(0.5f) }

    Card(
        modifier = Modifier.fillMaxWidth(),
        elevation = 4.dp,
        backgroundColor = Color(0xFFE3F2FD),
        shape = RoundedCornerShape(12.dp)
    ) {
        Column(
            modifier = Modifier.padding(16.dp)
        ) {
            Text(
                text = "üéõÔ∏è Shadow Properties Ï≤¥Ìóò",
                fontSize = 16.sp,
                fontWeight = FontWeight.Bold,
                color = Color(0xFF1976D2)
            )

            Spacer(modifier = Modifier.height(12.dp))

            Text(
                text = "Í∞Å ÏÜçÏÑ±ÏùÑ Ï°∞Ï†àÌïòÏó¨ Í∑∏Î¶ºÏûê Ìö®Í≥ºÎ•º ÌôïÏù∏Ìï¥Î≥¥ÏÑ∏Ïöî:",
                fontSize = 14.sp,
                color = Color.Gray
            )

            Spacer(modifier = Modifier.height(16.dp))

            // ÏÜçÏÑ± ÏÑ†ÌÉù ÌÉ≠
            Row(
                modifier = Modifier.fillMaxWidth(),
                horizontalArrangement = Arrangement.spacedBy(4.dp)
            ) {
                listOf("radius", "spread", "offset", "alpha").forEach { property ->
                    Button(
                        onClick = { selectedProperty = property },
                        modifier = Modifier.weight(1f),
                        colors = ButtonDefaults.buttonColors(
                            backgroundColor = if (selectedProperty == property)
                                Color(0xFF1976D2) else Color(0xFF1976D2).copy(alpha = 0.3f)
                        ),
                        shape = RoundedCornerShape(8.dp)
                    ) {
                        Text(
                            text = property,
                            color = Color.White,
                            fontSize = 10.sp
                        )
                    }
                }
            }

            Spacer(modifier = Modifier.height(16.dp))

            // Í∑∏Î¶ºÏûê ÎØ∏Î¶¨Î≥¥Í∏∞
            Box(
                modifier = Modifier
                    .fillMaxWidth()
                    .height(120.dp),
                contentAlignment = Alignment.Center
            ) {
                Box(
                    modifier = Modifier
                        .size(80.dp)
                        // Ïã§Ï†ú Í∑∏Î¶ºÏûê Ìö®Í≥º Ï†ÅÏö©
                        .shadow(
                            elevation = (radiusValue / 4).dp,
                            shape = RoundedCornerShape(16.dp),
                            clip = false,
                            ambientColor = Color.Black.copy(alpha = alphaValue * 0.6f),
                            spotColor = Color.Black.copy(alpha = alphaValue * 0.8f)
                        )
                        .background(
                            Color(0xFF2196F3),
                            RoundedCornerShape(16.dp)
                        ),
                    contentAlignment = Alignment.Center
                ) {
                    Text(
                        text = "DEMO",
                        color = Color.White,
                        fontSize = 12.sp,
                        fontWeight = FontWeight.Bold
                    )
                }
            }

            Spacer(modifier = Modifier.height(16.dp))

            // Ïä¨ÎùºÏù¥Îçî Ïª®Ìä∏Î°§
            when (selectedProperty) {
                "radius" -> {
                    Text("Blur Radius: ${radiusValue.toInt()}px", fontSize = 12.sp)
                    Slider(
                        value = radiusValue,
                        onValueChange = { radiusValue = it },
                        valueRange = 0f..100f,
                        colors = SliderDefaults.colors(thumbColor = Color(0xFF1976D2))
                    )
                }
                "spread" -> {
                    Text("Spread: ${spreadValue.toInt()}px", fontSize = 12.sp)
                    Slider(
                        value = spreadValue,
                        onValueChange = { spreadValue = it },
                        valueRange = 0f..50f,
                        colors = SliderDefaults.colors(thumbColor = Color(0xFF1976D2))
                    )
                }
                "offset" -> {
                    Text("Offset X: ${offsetX.toInt()}px", fontSize = 12.sp)
                    Slider(
                        value = offsetX,
                        onValueChange = { offsetX = it },
                        valueRange = -50f..50f,
                        colors = SliderDefaults.colors(thumbColor = Color(0xFF1976D2))
                    )
                    Text("Offset Y: ${offsetY.toInt()}px", fontSize = 12.sp)
                    Slider(
                        value = offsetY,
                        onValueChange = { offsetY = it },
                        valueRange = -50f..50f,
                        colors = SliderDefaults.colors(thumbColor = Color(0xFF1976D2))
                    )
                }
                "alpha" -> {
                    Text("Alpha: ${(alphaValue * 100).toInt()}%", fontSize = 12.sp)
                    Slider(
                        value = alphaValue,
                        onValueChange = { alphaValue = it },
                        valueRange = 0f..1f,
                        colors = SliderDefaults.colors(thumbColor = Color(0xFF1976D2))
                    )
                }
            }

            Spacer(modifier = Modifier.height(8.dp))

            Surface(
                modifier = Modifier.fillMaxWidth(),
                shape = RoundedCornerShape(6.dp),
                color = Color(0xFF1976D2).copy(alpha = 0.1f)
            ) {
            Text(
                text = "üí° Compose 1.9.0Ïùò Ìñ•ÏÉÅÎêú shadow APIÎ°ú Îçî ÏÑ∏Î∞ÄÌïòÍ≥† ÏÇ¨Ïã§Ï†ÅÏù∏ Í∑∏Î¶ºÏûê Ìö®Í≥ºÎ•º Íµ¨ÌòÑÌï† Ïàò ÏûàÏäµÎãàÎã§!",
                modifier = Modifier.padding(8.dp),
                fontSize = 11.sp,
                color = Color(0xFF1976D2),
                fontStyle = androidx.compose.ui.text.font.FontStyle.Italic
            )
            }
        }
    }
}

@Composable
private fun InteractiveShadowCard() {
    var isPressed by remember { mutableStateOf(false) }
    
    val shadowRadius by animateFloatAsState(
        targetValue = if (isPressed) 10f else 30f,
        animationSpec = spring()
    )
    
    val shadowAlpha by animateFloatAsState(
        targetValue = if (isPressed) 0.3f else 0.6f,
        animationSpec = spring()
    )

    Card(
        modifier = Modifier.fillMaxWidth(),
        elevation = 4.dp,
        backgroundColor = Color(0xFFFFF3E0),
        shape = RoundedCornerShape(12.dp)
    ) {
        Column(
            modifier = Modifier.padding(16.dp)
        ) {
            Text(
                text = "üéÆ Ïù∏ÌÑ∞ÎûôÌã∞Î∏å Í∑∏Î¶ºÏûê",
                fontSize = 16.sp,
                fontWeight = FontWeight.Bold,
                color = Color(0xFFE65100)
            )

            Spacer(modifier = Modifier.height(12.dp))

            Text(
                text = "ÌÑ∞Ïπò ÏÉÅÌò∏ÏûëÏö©ÏúºÎ°ú Ïï†ÎãàÎ©îÏù¥ÏÖòÎêòÎäî Í∑∏Î¶ºÏûê Ìö®Í≥º:",
                fontSize = 14.sp,
                color = Color.Gray
            )

            Spacer(modifier = Modifier.height(16.dp))

            Box(
                modifier = Modifier
                    .fillMaxWidth()
                    .height(120.dp),
                contentAlignment = Alignment.Center
            ) {
                Box(
                    modifier = Modifier
                        .size(100.dp)
                        .pointerInput(Unit) {
                            detectTapGestures(
                                onPress = {
                                    isPressed = true
                                    tryAwaitRelease()
                                    isPressed = false
                                }
                            )
                        }
                        // Ïã§Ï†ú Ïï†ÎãàÎ©îÏù¥ÏÖò Í∑∏Î¶ºÏûê Ìö®Í≥º
                        .shadow(
                            elevation = (shadowRadius / 3).dp,
                            shape = RoundedCornerShape(20.dp),
                            clip = false,
                            ambientColor = Color(0xFFFF9800).copy(alpha = shadowAlpha * 0.6f),
                            spotColor = Color(0xFFE65100).copy(alpha = shadowAlpha * 0.8f)
                        )
                        .background(
                            Brush.radialGradient(
                                colors = listOf(
                                    Color(0xFFFF9800),
                                    Color(0xFFE65100)
                                )
                            ),
                            RoundedCornerShape(20.dp)
                        ),
                    contentAlignment = Alignment.Center
                ) {
                    Column(
                        horizontalAlignment = Alignment.CenterHorizontally
                    ) {
                        Icon(
                            imageVector = Icons.Filled.Add,
                            contentDescription = "Add",
                            tint = Color.White,
                            modifier = Modifier.size(32.dp)
                        )
                        Text(
                            text = "TOUCH",
                            color = Color.White,
                            fontSize = 10.sp,
                            fontWeight = FontWeight.Bold
                        )
                    }
                }
            }

            Spacer(modifier = Modifier.height(12.dp))

            Row(
                modifier = Modifier.fillMaxWidth(),
                horizontalArrangement = Arrangement.SpaceBetween
            ) {
                Text(
                    text = "Shadow Radius: ${shadowRadius.toInt()}px",
                    fontSize = 12.sp,
                    color = Color(0xFFE65100)
                )
                Text(
                    text = "Alpha: ${(shadowAlpha * 100).toInt()}%",
                    fontSize = 12.sp,
                    color = Color(0xFFE65100)
                )
            }

            Spacer(modifier = Modifier.height(8.dp))

            Surface(
                modifier = Modifier.fillMaxWidth(),
                shape = RoundedCornerShape(6.dp),
                color = Color(0xFFE65100).copy(alpha = 0.1f)
            ) {
                Text(
                    text = "üéØ animateFloatAsStateÎ•º ÏÇ¨Ïö©ÌïòÏó¨ Í∑∏Î¶ºÏûê ÏÜçÏÑ±ÏùÑ Î∂ÄÎìúÎüΩÍ≤å Ïï†ÎãàÎ©îÏù¥ÏÖòÌï† Ïàò ÏûàÏäµÎãàÎã§!",
                    modifier = Modifier.padding(8.dp),
                    fontSize = 11.sp,
                    color = Color(0xFFE65100),
                    fontStyle = androidx.compose.ui.text.font.FontStyle.Italic
                )
            }
        }
    }
}

@Composable
private fun GlowEffectCard() {
    var glowIntensity by remember { mutableStateOf(50f) }

    Card(
        modifier = Modifier.fillMaxWidth(),
        elevation = 4.dp,
        backgroundColor = Color(0xFF1A1A1A),
        shape = RoundedCornerShape(12.dp)
    ) {
        Column(
            modifier = Modifier.padding(16.dp)
        ) {
            Text(
                text = "‚ú® Í∏ÄÎ°úÏö∞ Ìö®Í≥º",
                fontSize = 16.sp,
                fontWeight = FontWeight.Bold,
                color = Color.White
            )

            Spacer(modifier = Modifier.height(12.dp))

            Text(
                text = "Î∞ùÏùÄ ÏÉâÏÉÅÏùÑ ÏÇ¨Ïö©ÌïòÏó¨ Í∏ÄÎ°úÏö∞ Ìö®Í≥ºÎ•º ÎßåÎì§Ïñ¥Î≥¥ÏÑ∏Ïöî:",
                fontSize = 14.sp,
                color = Color.Gray
            )

            Spacer(modifier = Modifier.height(16.dp))

            Row(
                modifier = Modifier.fillMaxWidth(),
                horizontalArrangement = Arrangement.SpaceEvenly
            ) {
                // Ï≤≠Î°ùÏÉâ Í∏ÄÎ°úÏö∞
                Box(
                    modifier = Modifier
                        .size(60.dp)
                        // Ïã§Ï†ú Í∏ÄÎ°úÏö∞ Ìö®Í≥º
                        .shadow(
                            elevation = (glowIntensity / 5).dp,
                            shape = CircleShape,
                            clip = false,
                            ambientColor = Color(0xFF00E5FF).copy(alpha = glowIntensity / 100f),
                            spotColor = Color(0xFF00E5FF).copy(alpha = glowIntensity / 80f)
                        )
                        .background(Color(0xFF00E5FF), CircleShape)
                )

                // ÌïëÌÅ¨ÏÉâ Í∏ÄÎ°úÏö∞
                Box(
                    modifier = Modifier
                        .size(60.dp)
                        // Ïã§Ï†ú Í∏ÄÎ°úÏö∞ Ìö®Í≥º
                        .shadow(
                            elevation = (glowIntensity / 5).dp,
                            shape = CircleShape,
                            clip = false,
                            ambientColor = Color(0xFFE91E63).copy(alpha = glowIntensity / 100f),
                            spotColor = Color(0xFFE91E63).copy(alpha = glowIntensity / 80f)
                        )
                        .background(Color(0xFFE91E63), CircleShape)
                )

                // Ï¥àÎ°ùÏÉâ Í∏ÄÎ°úÏö∞
                Box(
                    modifier = Modifier
                        .size(60.dp)
                        // Ïã§Ï†ú Í∏ÄÎ°úÏö∞ Ìö®Í≥º
                        .shadow(
                            elevation = (glowIntensity / 5).dp,
                            shape = CircleShape,
                            clip = false,
                            ambientColor = Color(0xFF4CAF50).copy(alpha = glowIntensity / 100f),
                            spotColor = Color(0xFF4CAF50).copy(alpha = glowIntensity / 80f)
                        )
                        .background(Color(0xFF4CAF50), CircleShape)
                )
            }

            Spacer(modifier = Modifier.height(16.dp))

            Text(
                text = "Í∏ÄÎ°úÏö∞ Í∞ïÎèÑ: ${glowIntensity.toInt()}%",
                fontSize = 12.sp,
                color = Color.White
            )
            
            Slider(
                value = glowIntensity,
                onValueChange = { glowIntensity = it },
                valueRange = 0f..100f,
                colors = SliderDefaults.colors(
                    thumbColor = Color(0xFF00E5FF),
                    activeTrackColor = Color(0xFF00E5FF)
                )
            )

            Spacer(modifier = Modifier.height(8.dp))

            Surface(
                modifier = Modifier.fillMaxWidth(),
                shape = RoundedCornerShape(6.dp),
                color = Color(0xFF00E5FF).copy(alpha = 0.1f)
            ) {
                Text(
                    text = "üí° Î∞ùÏùÄ ÏÉâÏÉÅÍ≥º ÌÅ∞ radiusÎ•º ÏÇ¨Ïö©ÌïòÏó¨ ÎÑ§Ïò®ÏÇ¨Ïù∏ Í∞ôÏùÄ Í∏ÄÎ°úÏö∞ Ìö®Í≥ºÎ•º ÎßåÎì§ Ïàò ÏûàÏäµÎãàÎã§!",
                    modifier = Modifier.padding(8.dp),
                    fontSize = 11.sp,
                    color = Color(0xFF00E5FF),
                    fontStyle = androidx.compose.ui.text.font.FontStyle.Italic
                )
            }
        }
    }
}

@Composable
private fun NeumorphismCard() {
    Card(
        modifier = Modifier.fillMaxWidth(),
        elevation = 4.dp,
        backgroundColor = Color(0xFFF5F5F5),
        shape = RoundedCornerShape(12.dp)
    ) {
        Column(
            modifier = Modifier.padding(16.dp)
        ) {
            Text(
                text = "üé® Îâ¥Î™®ÌîºÏ¶ò ÎîîÏûêÏù∏",
                fontSize = 16.sp,
                fontWeight = FontWeight.Bold,
                color = Color(0xFF424242)
            )

            Spacer(modifier = Modifier.height(12.dp))

            Text(
                text = "dropShadowÏôÄ innerShadowÎ•º Ï°∞Ìï©ÌïòÏó¨ Îâ¥Î™®ÌîºÏ¶ò Ìö®Í≥º:",
                fontSize = 14.sp,
                color = Color.Gray
            )

            Spacer(modifier = Modifier.height(16.dp))

            Row(
                modifier = Modifier.fillMaxWidth(),
                horizontalArrangement = Arrangement.SpaceEvenly
            ) {
                // Î≥ºÎ°ùÌïú Î≤ÑÌäº
                Box(
                    modifier = Modifier
                        .size(80.dp)
                        // Ïã§Ï†ú Îâ¥Î™®ÌîºÏ¶ò Ìö®Í≥º (Î≥ºÎ°ù)
                        .shadow(
                            elevation = 8.dp,
                            shape = RoundedCornerShape(20.dp),
                            clip = false,
                            ambientColor = Color.White.copy(alpha = 0.8f),
                            spotColor = Color.Gray.copy(alpha = 0.3f)
                        )
                        .background(
                            Color(0xFFE0E0E0),
                            RoundedCornerShape(20.dp)
                        ),
                    contentAlignment = Alignment.Center
                ) {
                    Icon(
                        imageVector = Icons.Filled.Add,
                        contentDescription = "Add",
                        tint = Color(0xFF757575),
                        modifier = Modifier.size(24.dp)
                    )
                }

                // Ïò§Î™©Ìïú Î≤ÑÌäº
                Box(
                    modifier = Modifier
                        .size(80.dp)
                        .background(
                            Color(0xFFE0E0E0),
                            RoundedCornerShape(20.dp)
                        )
                        // Ïã§Ï†ú Îâ¥Î™®ÌîºÏ¶ò Ìö®Í≥º (inset)
                        .drawBehind {
                            val shadowColor = Color.Gray.copy(alpha = 0.4f)
                            val highlightColor = Color.White.copy(alpha = 0.6f)
                            val insetSize = 4.dp.toPx()
                            val cornerRadius = 20.dp.toPx()
                            
                            // Inner shadow
                            inset(insetSize, insetSize, insetSize, insetSize) {
                                drawRoundRect(
                                    color = shadowColor,
                                    size = size,
                                    cornerRadius = androidx.compose.ui.geometry.CornerRadius(cornerRadius)
                                )
                            }
                            
                            // Inner highlight
                            drawRoundRect(
                                color = highlightColor,
                                topLeft = Offset(2.dp.toPx(), 2.dp.toPx()),
                                size = Size(size.width - 4.dp.toPx(), size.height - 4.dp.toPx()),
                                cornerRadius = androidx.compose.ui.geometry.CornerRadius(cornerRadius)
                            )
                        },
                    contentAlignment = Alignment.Center
                ) {
                    Icon(
                        imageVector = Icons.Filled.KeyboardArrowDown,
                        contentDescription = "Down",
                        tint = Color(0xFF757575),
                        modifier = Modifier.size(24.dp)
                    )
                }
            }

            Spacer(modifier = Modifier.height(16.dp))

            Surface(
                modifier = Modifier.fillMaxWidth(),
                shape = RoundedCornerShape(6.dp),
                color = Color(0xFF757575).copy(alpha = 0.1f)
            ) {
                Text(
                    text = "üéØ Îâ¥Î™®ÌîºÏ¶òÏùÄ Î∞ùÏùÄ Í∑∏Î¶ºÏûê(ÏúÑ/ÏôºÏ™Ω)ÏôÄ Ïñ¥ÎëêÏö¥ Í∑∏Î¶ºÏûê(ÏïÑÎûò/Ïò§Î•∏Ï™Ω)Î•º Ï°∞Ìï©ÌïòÏó¨ ÎßåÎì≠ÎãàÎã§!",
                    modifier = Modifier.padding(8.dp),
                    fontSize = 11.sp,
                    color = Color(0xFF757575),
                    fontStyle = androidx.compose.ui.text.font.FontStyle.Italic
                )
            }
        }
    }
}

@Composable
private fun KeyboardButtonCard() {
    var isPressed by remember { mutableStateOf(false) }

    Card(
        modifier = Modifier.fillMaxWidth(),
        elevation = 4.dp,
        backgroundColor = Color(0xFFE8F5E8),
        shape = RoundedCornerShape(12.dp)
    ) {
        Column(
            modifier = Modifier.padding(16.dp)
        ) {
            Text(
                text = "‚å®Ô∏è 3D ÌÇ§Î≥¥Îìú Î≤ÑÌäº",
                fontSize = 16.sp,
                fontWeight = FontWeight.Bold,
                color = Color(0xFF388E3C)
            )

            Spacer(modifier = Modifier.height(12.dp))

            Text(
                text = "Ïó¨Îü¨ Í∑∏Î¶ºÏûêÎ•º Ï°∞Ìï©ÌïòÏó¨ ÌòÑÏã§Ï†ÅÏù∏ 3D Î≤ÑÌäº Ìö®Í≥º:",
                fontSize = 14.sp,
                color = Color.Gray
            )

            Spacer(modifier = Modifier.height(16.dp))

            Box(
                modifier = Modifier
                    .fillMaxWidth()
                    .height(120.dp),
                contentAlignment = Alignment.Center
            ) {
                Box(
                    modifier = Modifier
                        .size(width = 60.dp, height = 50.dp)
                        .clickable { isPressed = !isPressed }
                        // Ïã§Ï†ú 3D ÌÇ§Î≥¥Îìú Î≤ÑÌäº Ìö®Í≥º
                        .shadow(
                            elevation = if (isPressed) 2.dp else 6.dp,
                            shape = RoundedCornerShape(8.dp),
                            clip = false,
                            ambientColor = if (isPressed) Color.Gray.copy(alpha = 0.6f) else Color.Gray.copy(alpha = 0.3f),
                            spotColor = if (isPressed) Color.Gray.copy(alpha = 0.8f) else Color.Gray.copy(alpha = 0.5f)
                        )
                        .background(
                            if (isPressed) Color(0xFFE0E0E0) else Color.White,
                            RoundedCornerShape(8.dp)
                        ),
                    contentAlignment = Alignment.Center
                ) {
                    Text(
                        text = "A",
                        fontSize = 20.sp,
                        fontWeight = FontWeight.Bold,
                        color = Color(0xFF424242)
                    )
                }
            }

            Spacer(modifier = Modifier.height(8.dp))

            Text(
                text = if (isPressed) "ÎàåÎ¶º ÏÉÅÌÉú" else "Í∏∞Î≥∏ ÏÉÅÌÉú",
                fontSize = 12.sp,
                color = Color(0xFF388E3C),
                textAlign = TextAlign.Center,
                modifier = Modifier.fillMaxWidth()
            )

            Spacer(modifier = Modifier.height(12.dp))

            Surface(
                modifier = Modifier.fillMaxWidth(),
                shape = RoundedCornerShape(6.dp),
                color = Color(0xFF388E3C).copy(alpha = 0.1f)
            ) {
                Text(
                    text = "üí° Ïã§Ï†úÎ°úÎäî ÏÉÅÎã®Ïóê ÌïòÏù¥ÎùºÏù¥Ìä∏(Ìù∞ÏÉâ), ÌïòÎã®Ïóê ÎìúÎ°≠ ÏÑÄÎèÑÏö∞(Í≤ÄÏ†ï)Î•º Ï∂îÍ∞ÄÌïòÏó¨ 3D Ìö®Í≥ºÎ•º ÎßåÎì≠ÎãàÎã§!",
                    modifier = Modifier.padding(8.dp),
                    fontSize = 11.sp,
                    color = Color(0xFF388E3C),
                    fontStyle = androidx.compose.ui.text.font.FontStyle.Italic
                )
            }
        }
    }
}

@Composable
private fun BlendModeCard() {
    var selectedBlendMode by remember { mutableStateOf("Normal") }
    val blendModes = listOf("Normal", "Overlay", "Multiply", "Screen")

    Card(
        modifier = Modifier.fillMaxWidth(),
        elevation = 4.dp,
        backgroundColor = Color(0xFFFFEBEE),
        shape = RoundedCornerShape(12.dp)
    ) {
        Column(
            modifier = Modifier.padding(16.dp)
        ) {
            Text(
                text = "üé≠ Î∏îÎ†åÎî© Î™®Îìú",
                fontSize = 16.sp,
                fontWeight = FontWeight.Bold,
                color = Color(0xFFD32F2F)
            )

            Spacer(modifier = Modifier.height(12.dp))

            Text(
                text = "Îã§ÏñëÌïú Î∏îÎ†åÎî© Î™®ÎìúÎ°ú ÌòÑÏã§Ï†ÅÏù∏ Í∑∏Î¶ºÏûê Ìö®Í≥º:",
                fontSize = 14.sp,
                color = Color.Gray
            )

            Spacer(modifier = Modifier.height(16.dp))

            // Î∏îÎ†åÎî© Î™®Îìú ÏÑ†ÌÉù
            Row(
                modifier = Modifier.fillMaxWidth(),
                horizontalArrangement = Arrangement.spacedBy(4.dp)
            ) {
                blendModes.forEach { mode ->
                    Button(
                        onClick = { selectedBlendMode = mode },
                        modifier = Modifier.weight(1f),
                        colors = ButtonDefaults.buttonColors(
                            backgroundColor = if (selectedBlendMode == mode)
                                Color(0xFFD32F2F) else Color(0xFFD32F2F).copy(alpha = 0.3f)
                        ),
                        shape = RoundedCornerShape(8.dp)
                    ) {
                        Text(
                            text = mode,
                            color = Color.White,
                            fontSize = 9.sp
                        )
                    }
                }
            }

            Spacer(modifier = Modifier.height(16.dp))

            // Î∏îÎ†åÎî© Ìö®Í≥º ÎØ∏Î¶¨Î≥¥Í∏∞
            Row(
                modifier = Modifier.fillMaxWidth(),
                horizontalArrangement = Arrangement.SpaceEvenly
            ) {
                // ÌååÎûÄ Î∞∞Í≤Ω
                Box(
                    modifier = Modifier
                        .size(60.dp)
                        .background(Color(0xFF2196F3), CircleShape),
                    contentAlignment = Alignment.Center
                ) {
                    // ÏãúÎÆ¨Î†àÏù¥ÏÖòÎêú Î∏îÎ†åÎî©Îêú Í∑∏Î¶ºÏûê
                    Box(
                        modifier = Modifier
                            .size(40.dp)
                            .background(
                                when (selectedBlendMode) {
                                    "Overlay" -> Color(0xFF1565C0)
                                    "Multiply" -> Color(0xFF0D47A1)
                                    "Screen" -> Color(0xFF42A5F5)
                                    else -> Color.Black.copy(alpha = 0.3f)
                                },
                                CircleShape
                            )
                    )
                }

                // Ï¥àÎ°ù Î∞∞Í≤Ω
                Box(
                    modifier = Modifier
                        .size(60.dp)
                        .background(Color(0xFF4CAF50), CircleShape),
                    contentAlignment = Alignment.Center
                ) {
                    Box(
                        modifier = Modifier
                            .size(40.dp)
                            .background(
                                when (selectedBlendMode) {
                                    "Overlay" -> Color(0xFF388E3C)
                                    "Multiply" -> Color(0xFF2E7D32)
                                    "Screen" -> Color(0xFF66BB6A)
                                    else -> Color.Black.copy(alpha = 0.3f)
                                },
                                CircleShape
                            )
                    )
                }

                // Îπ®Í∞Ñ Î∞∞Í≤Ω
                Box(
                    modifier = Modifier
                        .size(60.dp)
                        .background(Color(0xFFF44336), CircleShape),
                    contentAlignment = Alignment.Center
                ) {
                    Box(
                        modifier = Modifier
                            .size(40.dp)
                            .background(
                                when (selectedBlendMode) {
                                    "Overlay" -> Color(0xFFD32F2F)
                                    "Multiply" -> Color(0xFFB71C1C)
                                    "Screen" -> Color(0xFFEF5350)
                                    else -> Color.Black.copy(alpha = 0.3f)
                                },
                                CircleShape
                            )
                    )
                }
            }

            Spacer(modifier = Modifier.height(16.dp))

            Surface(
                modifier = Modifier.fillMaxWidth(),
                shape = RoundedCornerShape(6.dp),
                color = Color(0xFFD32F2F).copy(alpha = 0.1f)
            ) {
                Column(
                    modifier = Modifier.padding(8.dp)
                ) {
                    Text(
                        text = "ÌòÑÏû¨ Î∏îÎ†åÎî© Î™®Îìú: $selectedBlendMode",
                        fontSize = 12.sp,
                        fontWeight = FontWeight.Medium,
                        color = Color(0xFFD32F2F)
                    )
                    
                    Text(
                        text = when (selectedBlendMode) {
                            "Overlay" -> "Î∞∞Í≤ΩÏÉâÍ≥º ÌòºÌï©ÎêòÏñ¥ Îçî ÍπäÏùÄ Í∑∏Î¶ºÏûê"
                            "Multiply" -> "Î∞∞Í≤ΩÏÉâÏùÑ Ïñ¥Îë°Í≤å ÎßåÎìúÎäî Í∑∏Î¶ºÏûê"
                            "Screen" -> "Î∞ùÍ≤å ÎßåÎìúÎäî ÌïòÏù¥ÎùºÏù¥Ìä∏ Ìö®Í≥º"
                            else -> "Í∏∞Î≥∏ Î∏îÎ†åÎî© (Í≤ÄÏ†ï Í∑∏Î¶ºÏûê)"
                        },
                        fontSize = 10.sp,
                        color = Color(0xFFD32F2F).copy(alpha = 0.7f),
                        fontStyle = androidx.compose.ui.text.font.FontStyle.Italic
                    )
                }
            }
        }
    }
}
